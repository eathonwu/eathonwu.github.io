"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8966],{6898:(e,a,s)=>{s.r(a),s.d(a,{comp:()=>n,data:()=>p});var r=s(641);const i={},n=(0,s(6262).A)(i,[["render",function(e,a){return(0,r.uX)(),(0,r.CE)("div",null,a[0]||(a[0]=[(0,r.Fv)('<h1 id="redis-架构" tabindex="-1"><a class="header-anchor" href="#redis-架构"><span>redis 架构</span></a></h1><figure><img src="/Users/wuguangkuo/hugo_project/ms/static/image-20220520122914366.png" alt="image-20220520122914366" tabindex="0" loading="lazy"><figcaption>image-20220520122914366</figcaption></figure><h2 id="持久化方式" tabindex="-1"><a class="header-anchor" href="#持久化方式"><span>持久化方式</span></a></h2><p>rdb: fork进程</p><p>aof: 一个线程,</p><p>redis基础数据结构</p><p>string类型:SDS ,简单字符串, 获取字符串容量 需要时间o(1), 是安全的,不会造成缓存区溢出</p><figure><img src="https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/redis/数据结构/redis数据结构-lastnew.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>详细: <a href="https://www.cnblogs.com/xiaolincoding/p/15628854.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/xiaolincoding/p/15628854.html</a></p><h2 id="一致性hash" tabindex="-1"><a class="header-anchor" href="#一致性hash"><span>一致性hash:</span></a></h2><p>一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 <code>K/n</code> 个关键字重新映射，其中 <code>K</code> 是关键字的数量，<code>n</code> 是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。</p><h1 id="多级缓存" tabindex="-1"><a class="header-anchor" href="#多级缓存"><span>多级缓存:</span></a></h1><p>缓存更新、缓存一致性问题</p><h1 id="主从复制原理" tabindex="-1"><a class="header-anchor" href="#主从复制原理"><span>主从复制原理</span></a></h1><p>当启动一个 slave node 的时候，它会发送一个 PSYNC 命令给 master node。<br> 如果这是 slave node 初次连接到 master node，那么会触发一次 full resynchronization 全量复制。此时 master 会启动一个后台线程，开始生成一份 RDB 快照文件。<br> 同时还会将从客户端 client 新收到的所有写命令缓存在内存中。RDB 文件生成完毕后， master 会将这个 RDB 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中。<br> 接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。<br> slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node 仅会复制给 slave 部分缺少的数据。</p><h1 id="线上redis集群配置-可选项" tabindex="-1"><a class="header-anchor" href="#线上redis集群配置-可选项"><span>线上redis集群配置? (可选项)</span></a></h1><h1 id="redis-cluster集群特性" tabindex="-1"><a class="header-anchor" href="#redis-cluster集群特性"><span>redis-cluster集群特性</span></a></h1><p>无法使用0 号数据库</p><h1 id="redis分区-分片" tabindex="-1"><a class="header-anchor" href="#redis分区-分片"><span>redis分区(分片)</span></a></h1><p>客户端路由</p><p>proxy代理路有</p><p>查询路由</p><p>缺点: 不支持多个key,不能进行管道操作,不能使用redis事务,不能对集合求交集</p><h2 id="集群扩容-扩容分区" tabindex="-1"><a class="header-anchor" href="#集群扩容-扩容分区"><span>集群扩容,扩容分区</span></a></h2><h1 id="缓存的几个注意事项" tabindex="-1"><a class="header-anchor" href="#缓存的几个注意事项"><span>缓存的几个注意事项</span></a></h1><p>缓存雪崩</p><p>缓存穿透 : 数据都没有, 采用bloom-filter 过滤器, 多个hash函数</p><p>缓存击穿</p><p>缓存预热</p><p>缓存降级</p><p>热点key缓存问题(加锁):</p><p>​ 对缓存查询加锁，如果 KEY 不存在，就加锁，然后查 DB 入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入 DB 查询</p><h1 id="缓存一执性问题" tabindex="-1"><a class="header-anchor" href="#缓存一执性问题"><span>缓存一执性问题</span></a></h1><h1 id="主从一致性问题" tabindex="-1"><a class="header-anchor" href="#主从一致性问题"><span>主从一致性问题</span></a></h1><h1 id="scan命令-游标查询" tabindex="-1"><a class="header-anchor" href="#scan命令-游标查询"><span>scan命令(游标查询)</span></a></h1><p><strong>假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？</strong></p><p>使用 keys 指令可以扫出指定模式的 key 列表。</p><p>对方接着追问：如果这个 redis 正在给线上的业务提供服务，那使用 keys 指令会有什么问题？</p><p>这个时候你要回答 redis 关键的一个特性：redis 的单线程的。keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用 scan 指令，scan 指令可以无阻塞的提取出指定模式的 key 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 keys 指令长。</p><p>redis实现分布式锁</p><p>redis 数据接口</p><p>SDS:简单字符串,</p><p>Set:</p><p>Hash:</p><h1 id="redis优化" tabindex="-1"><a class="header-anchor" href="#redis优化"><span>redis优化</span></a></h1><p>1、尽量不要使用慢查询语句</p><p>2、 大key</p><p>3、不要使用keys 语句, 改为scan</p><p>4、 合理的数据结构, 比如redis 会对hash存储做压缩优化, 直接存储key 会导致数据占用更大的存储空间, 而hash 则可以利用redis内容的优化手段降低内存使用率</p><p>5、 尽量关闭swap ,性能很差</p><p>6、 使用pipline 来优化查询, 在集群模式下不生效</p><p>7、开启内存碎片清理 ,自动内存碎片</p><p>8、合理设置backlog的大小，应设置成在服务端最大能够承受qps的1-1.5倍左右。</p><p>redis 分布式锁</p><h2 id="时间轮机制" tabindex="-1"><a class="header-anchor" href="#时间轮机制"><span>时间轮机制</span></a></h2><p>定时任务轮训 ,可以考虑使用这个数据结构</p><p>时间轮机制是一种高效的定时任务调度算法，通过使用循环数组和时间槽的方式，实现了简单、可扩展和高效的定时任务管理。</p><h1 id="kafka-知识点" tabindex="-1"><a class="header-anchor" href="#kafka-知识点"><span>kafka 知识点</span></a></h1><h2 id="读数据" tabindex="-1"><a class="header-anchor" href="#读数据"><span>读数据</span></a></h2><ol><li>根据稀疏索引，快速定位到要消费的数据</li><li>零拷贝机制 减少数据的拷贝 减少了应用程序与操作系统上下文切换</li></ol><p>![image-20230704110442310](/Users/wuguangkuo/Library/Application Support/typora-user-images/image-20230704110442310.png)</p><h2 id="高可用" tabindex="-1"><a class="header-anchor" href="#高可用"><span>高可用</span></a></h2><p>在kafka里面分区是有副本的，注：<strong>0.8以前是没有副本机制的</strong>。创建主题时，可以指定分区，也可以指定副本个数。副本是有角色的：leader partition：1、写数据、读数据操作都是从leader partition去操作的。2、会维护一个ISR（in-sync- replica ）列表，但是会根据一定的规则删除ISR列表里面的值 生产者发送来一个消息，消息首先要写入到leader partition中 写完了以后，还要把消息写入到ISR列表里面的其它分区，写完后才算这个消息提交 follower partition：从leader partition同步数据。</p><h2 id="写数据" tabindex="-1"><a class="header-anchor" href="#写数据"><span>写数据</span></a></h2><ol><li>把数据先写入到OS Cache</li><li>写到磁盘上面是顺序写，性能很高</li></ol><h2 id="数据过期" tabindex="-1"><a class="header-anchor" href="#数据过期"><span>数据过期</span></a></h2><ol><li>按照日志时间进行过期</li><li>按照容量</li></ol><h2 id="网络架构" tabindex="-1"><a class="header-anchor" href="#网络架构"><span>网络架构</span></a></h2><h2 id="规划" tabindex="-1"><a class="header-anchor" href="#规划"><span>规划</span></a></h2><p>一般情况下，我们评估机器的时候，是按照高峰期的4倍的去评估,遵循28原则</p><ol><li>物理机 or 虚拟机</li><li>磁盘 ,SSD固态硬盘，还是需要普通的机械硬盘**SSD硬盘：性能比较好，但是价格贵 SAS盘：某方面性能不是很好，但是比较便宜。SSD硬盘性能比较好，指的是它随机读写的性能比较好。适合MySQL这样集群。**但是其实他的顺序写的性能跟SAS盘差不多。kafka的理解：就是用的顺序写。所以我们就用普通的【<code>机械硬盘</code>】就可以了。</li></ol><h2 id="原文章链接-https-mp-weixin-qq-com-s-v1ksiriurcsrx7fcmq2ntq" tabindex="-1"><a class="header-anchor" href="#原文章链接-https-mp-weixin-qq-com-s-v1ksiriurcsrx7fcmq2ntq"><span>原文章链接 <a href="https://mp.weixin.qq.com/s/V1KSIrIURCsrX7fCmq2NtQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/V1KSIrIURCsrX7fCmq2NtQ</a></span></a></h2><h1 id="https-执行过程" tabindex="-1"><a class="header-anchor" href="#https-执行过程"><span>https 执行过程</span></a></h1><h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础"><span>java基础</span></a></h1><p>锁:</p><p>偏向锁 、 轻量级锁、重量级锁 、 自旋锁、</p><h1 id="go面试" tabindex="-1"><a class="header-anchor" href="#go面试"><span>GO面试</span></a></h1><h2 id="gmp-模型" tabindex="-1"><a class="header-anchor" href="#gmp-模型"><span>GMP 模型</span></a></h2><p>key---key---&gt;value形式 还是key-value形式</p><p>leecode 常用函数:</p><p>sort.Slice</p><p>sort.Ints</p>',82)]))}]]),p=JSON.parse('{"path":"/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%9E%B6%E6%9E%84.html","title":"redis 架构","lang":"zh-CN","frontmatter":{"description":"redis 架构 image-20220520122914366image-20220520122914366 持久化方式 rdb: fork进程 aof: 一个线程, redis基础数据结构 string类型:SDS ,简单字符串, 获取字符串容量 需要时间o(1), 是安全的,不会造成缓存区溢出 imgimg 详细: https://www.cnb...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"ntom"}],["meta",{"property":"og:title","content":"redis 架构"}],["meta",{"property":"og:description","content":"redis 架构 image-20220520122914366image-20220520122914366 持久化方式 rdb: fork进程 aof: 一个线程, redis基础数据结构 string类型:SDS ,简单字符串, 获取字符串容量 需要时间o(1), 是安全的,不会造成缓存区溢出 imgimg 详细: https://www.cnb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Users/wuguangkuo/hugo_project/ms/static/image-20220520122914366.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T14:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T14:28:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"redis 架构\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/Users/wuguangkuo/hugo_project/ms/static/image-20220520122914366.png\\",\\"https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-lastnew.png\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/Users/wuguangkuo/Library/Application Support/typora-user-images/image-20230704110442310.png\\"],\\"dateModified\\":\\"2024-12-23T14:28:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"notm\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"持久化方式","slug":"持久化方式","link":"#持久化方式","children":[]},{"level":2,"title":"一致性hash:","slug":"一致性hash","link":"#一致性hash","children":[]},{"level":2,"title":"集群扩容,扩容分区","slug":"集群扩容-扩容分区","link":"#集群扩容-扩容分区","children":[]},{"level":2,"title":"时间轮机制","slug":"时间轮机制","link":"#时间轮机制","children":[]},{"level":2,"title":"读数据","slug":"读数据","link":"#读数据","children":[]},{"level":2,"title":"高可用","slug":"高可用","link":"#高可用","children":[]},{"level":2,"title":"写数据","slug":"写数据","link":"#写数据","children":[]},{"level":2,"title":"数据过期","slug":"数据过期","link":"#数据过期","children":[]},{"level":2,"title":"网络架构","slug":"网络架构","link":"#网络架构","children":[]},{"level":2,"title":"规划","slug":"规划","link":"#规划","children":[]},{"level":2,"title":"原文章链接  https://mp.weixin.qq.com/s/V1KSIrIURCsrX7fCmq2NtQ","slug":"原文章链接-https-mp-weixin-qq-com-s-v1ksiriurcsrx7fcmq2ntq","link":"#原文章链接-https-mp-weixin-qq-com-s-v1ksiriurcsrx7fcmq2ntq","children":[]},{"level":2,"title":"GMP 模型","slug":"gmp-模型","link":"#gmp-模型","children":[]}],"git":{"createdTime":1734964134000,"updatedTime":1734964134000,"contributors":[{"name":"Yang Yang","username":"Yang Yang","email":"yangyang@YangdeMacBook-Air.local","commits":1,"url":"https://github.com/Yang Yang"}]},"readingTime":{"minutes":5.44,"words":1633},"filePathRelative":"数据库/redis/架构.md","localizedDate":"2024年12月23日","autoDesc":true}')},6262:(e,a)=>{a.A=(e,a)=>{const s=e.__vccOpts||e;for(const[e,r]of a)s[e]=r;return s}}}]);