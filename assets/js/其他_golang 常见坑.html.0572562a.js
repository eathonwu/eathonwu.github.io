"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[535],{9335:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var n=a(641);const l={},e=(0,a(6262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<p>2024 -11- 17</p><p><a href="https://geektutu.com/post/hpg-string-concat.html" target="_blank" rel="noopener noreferrer">https://geektutu.com/post/hpg-string-concat.html</a></p><p>题目汇总 参考 : <a href="https://zhuanlan.zhihu.com/p/471490292" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/471490292</a> golang</p><h2 id="什么是协程-goroutine" tabindex="-1"><a class="header-anchor" href="#什么是协程-goroutine"><span>什么是协程（Goroutine）</span></a></h2><p>​ 协程是<strong>用户态轻量级线程</strong>，它是<strong>线程调度的基本单位</strong>。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会<strong>自动伸缩</strong>， 因此可以轻易实现成千上万个goroutine同时启动。</p><p><strong>对比线程一般 8M 虚拟内存</strong></p><h3 id="线程创建方式" tabindex="-1"><a class="header-anchor" href="#线程创建方式"><span>线程创建方式</span></a></h3><p>c++ 创建线程方式：</p><p>java 创建线程方式</p><p>python 创建线程方式</p><p>linux 创建线程方式</p><h2 id="性能排查" tabindex="-1"><a class="header-anchor" href="#性能排查"><span>性能排查</span></a></h2><p>基础测试</p><p>pprof 火焰图</p><h2 id="如何高效地拼接字符串" tabindex="-1"><a class="header-anchor" href="#如何高效地拼接字符串"><span>如何高效地拼接字符串</span></a></h2><p>拼接字符串的方式有：<code>+</code> , <code>fmt.Sprintf</code> , <code>strings.Builder</code>, <code>bytes.Buffer</code>, <code>strings.Join</code></p><ul><li>&quot;+&quot;</li></ul><p>使用<code>+</code>操作符进行拼接时，会对字符串进行遍历，计算并开辟一个新的空间来存储原来的两个字符串。</p><ul><li><p>fmt.Sprintf</p><p>由于采用了接口参数，必须要用反射获取值，因此有性能损耗。</p></li><li><p>3 strings.Builder：</p></li></ul><p>用WriteString()进行拼接，内部实现是指针+切片，同时String()返回拼接后的字符串，它是直接把[]byte转换为string，从而避免变量拷贝。</p><ul><li>4 bytes.Buffer</li></ul><p><code>bytes.Buffer</code>是一个一个缓冲<code>byte</code>类型的缓冲器，这个缓冲器里存放着都是<code>byte</code>，</p><p><code>bytes.buffer</code>底层也是一个<code>[]byte</code>切片。</p><ul><li>strings.join</li></ul><p><code>strings.join</code>也是基于<code>strings.builder</code>来实现的,并且可以自定义分隔符，在join方法内调用了b.Grow(n)方法，这个是进行初步的容量分配，而前面计算的n的长度就是我们要拼接的slice的长度，因为我们传入切片长度固定，所以提前进行容量分配可以减少内存分配，很高效。</p><p><strong>性能比较</strong>：</p><p>strings.Join ≈ strings.Builder &gt; bytes.Buffer &gt; &quot;+&quot; &gt; fmt.Sprintf</p><h2 id="数组和切片区别" tabindex="-1"><a class="header-anchor" href="#数组和切片区别"><span>数组和切片区别</span></a></h2><p>数组的初始化</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//1</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切片初始化</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t//</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="切片常见操作" tabindex="-1"><a class="header-anchor" href="#切片常见操作"><span>切片常见操作</span></a></h2><h2 id="go-支持默认参数或可选参数吗" tabindex="-1"><a class="header-anchor" href="#go-支持默认参数或可选参数吗"><span>Go 支持默认参数或可选参数吗</span></a></h2><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span>？</span></a></h2><p>不支持，但支持可变参数</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这个函数可以传入任意数量的整型参数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    total</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> range</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nums</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        total</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> +=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">total</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="别名" tabindex="-1"><a class="header-anchor" href="#别名"><span>别名</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">\tColor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int32</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 类型重命名</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">\tCar</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int32</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\tred</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Color</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\taudi</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Car</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">audi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体打印时-v-和-v-的区别" tabindex="-1"><a class="header-anchor" href="#结构体打印时-v-和-v-的区别"><span>结构体打印时，<code>%v</code> 和 <code>%+v</code> 的区别</span></a></h3><p><code>%v</code>输出结构体各成员的值；</p><p><code>%+v</code>输出结构体各成员的<strong>名称</strong>和<strong>值</strong>；</p><p><code>%#v</code>输出结构体名称和结构体各成员的名称和值</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> stu</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tname</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tage</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int32</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\ts</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">vstu:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">+vstu:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%+v</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">#vstu:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%#v</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">结果</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vstu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hello</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">%+</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vstu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">hello</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vstu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">stu</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iota" tabindex="-1"><a class="header-anchor" href="#iota"><span>iota</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\tRed</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> iota</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\tBlack</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">\tYellow</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Black</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Yellow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何知道一个对象是分配在栈上还是堆上" tabindex="-1"><a class="header-anchor" href="#如何知道一个对象是分配在栈上还是堆上"><span>如何知道一个对象是分配在栈上还是堆上？</span></a></h3><p>Go和C++不同，Go局部变量会进行<strong>逃逸分析</strong>。如果<strong>变量离开作用域后没有被引用</strong>，则<strong>优先</strong>分配到栈上，否则分配到堆上。那么如何判断是否发生了逃逸呢？</p><p><code>go build -gcflags &#39;-m -l&#39; xxx.go</code>.</p><p>关于逃逸的可能情况：变量大小不确定，变量类型不确定，变量分配的内存超过用户栈最大值，暴露给了外部指针。</p><h3 id="_2-个-nil-可能不相等吗" tabindex="-1"><a class="header-anchor" href="#_2-个-nil-可能不相等吗"><span>2 个 nil 可能不相等吗？</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{} </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tfmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Equal&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者并不相同。总结：<strong>两个nil只有在类型相同时才相等</strong></p><h3 id="golang-gc" tabindex="-1"><a class="header-anchor" href="#golang-gc"><span>GOlang GC</span></a></h3><p>*<strong>标记清除法*</strong></p><p>分为两个阶段：标记和清除</p><p>标记阶段：从根对象出发寻找并标记所有存活的对象。</p><p>清除阶段：遍历堆中的对象，回收未标记的对象，并加入空闲链表。</p><p>缺点是需要暂停程序STW。</p><p>*<strong>三色标记法*</strong>：</p><p>将对象标记为白色，灰色或黑色。</p><p>白色：不确定对象（默认色）；黑色：存活对象。灰色：存活对象，子对象待处理。</p><p>标记开始时，先将所有对象加入白色集合（需要STW）。首先将根对象标记为灰色，然后将一个对象从灰色集合取出，遍历其子对象，放入灰色集合。同时将取出的对象放入黑色集合，直到灰色集合为空。最后的白色集合对象就是需要清理的对象。</p><p>这种方法有一个缺陷，如果对象的引用被用户修改了，那么之前的标记就无效了。因此Go采用了<strong>写屏障技术</strong>，当对象新增或者更新会将其着色为灰色。</p><p>一次完整的GC分为四个阶段：</p><ol><li>准备标记（需要STW），开启写屏障。</li><li>开始标记</li><li>标记结束（STW），关闭写屏障</li><li>清理（并发）</li></ol><p><strong>混合写屏障</strong>分为以下四步：</p><ol><li>GC开始时，将栈上的全部对象标记为黑色（不需要二次扫描，无需STW）；</li><li>GC期间，任何栈上创建的新对象均为黑色</li><li>被删除引用的对象标记为灰色</li><li>被添加引用的对象标记为灰色</li></ol><p>总而言之就是确保黑色对象不能引用白色对象，这个改进直接使得GC时间从 2s降低到2us。</p><h3 id="非接口的任意类型-t-都能够调用-t-的方法吗-反过来呢" tabindex="-1"><a class="header-anchor" href="#非接口的任意类型-t-都能够调用-t-的方法吗-反过来呢"><span>非接口的任意类型 T() 都能够调用 <code>*T</code> 的方法吗？反过来呢？</span></a></h3><p>一个T类型的值可以调用*T类型声明的方法，当且仅当T是<strong>可寻址的</strong>。</p><p>反之：*T 可以调用T()的方法，因为指针可以解引用。</p><p>exception：</p><h3 id="_08-go-slice是怎么扩容的" tabindex="-1"><a class="header-anchor" href="#_08-go-slice是怎么扩容的"><span>08 go slice是怎么扩容的？</span></a></h3><p>Go &lt;= 1.17</p><p>如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。</p><p>如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap/4。</p><p>Go1.18之后，引入了新的扩容规则：<a href="https://link.zhihu.com/?target=https%3A//www.lookcos.cn/archives/1204.html" target="_blank" rel="noopener noreferrer">浅谈 Go 1.18.1的切片扩容机制</a></p><figure><img src="https://img2023.cnblogs.com/blog/3182848/202308/3182848-20230821211328513-1788770159.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="❤无缓冲的-channel-和有缓冲的-channel-的区别" tabindex="-1"><a class="header-anchor" href="#❤无缓冲的-channel-和有缓冲的-channel-的区别"><span>❤无缓冲的 channel 和有缓冲的 channel 的区别？</span></a></h3><p>（这个问题笔者也纠结了很久，直到看到一篇文章，阻塞与否是分别针对发送接收方而言的，才茅塞顿开）</p><p>对于无缓冲区channel：</p><p>发送的数据如果没有被接收方接收，那么**发送方阻塞；**如果一直接收不到发送方的数据，<strong>接收方阻塞</strong>；</p><p>有缓冲的channel：</p><p>发送方在缓冲区满的时候阻塞，接收方不阻塞；接收方在缓冲区为空的时候阻塞，发送方不阻塞。</p><p>可以类比生产者与消费者问题。</p><figure><img src="https://pic3.zhimg.com/v2-b770e5632874d40780ecfe79701324f2_1440w.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="为什么有协程泄露-goroutine-leak" tabindex="-1"><a class="header-anchor" href="#为什么有协程泄露-goroutine-leak"><span>为什么有协程泄露(Goroutine Leak)？</span></a></h3><p>协程泄漏是指协程创建之后没有得到释放。主要原因有：</p><ol><li>缺少接收器，导致发送阻塞</li><li>缺少发送器，导致接收阻塞</li><li>死锁。多个协程由于竞争资源导致死锁。</li><li>创建协程的没有回收。</li></ol><h3 id="go-可以限制运行时操作系统线程的数量吗-常见的goroutine操作函数有哪些" tabindex="-1"><a class="header-anchor" href="#go-可以限制运行时操作系统线程的数量吗-常见的goroutine操作函数有哪些"><span>Go 可以限制运行时操作系统线程的数量吗？ 常见的goroutine操作函数有哪些？</span></a></h3><p>可以，使用runtime.GOMAXPROCS(num int)可以设置线程数目。该值默认为CPU逻辑核数，如果设的太大，会引起频繁的线程切换，降低性能。</p><p>runtime.Gosched()，用于让出CPU时间片，让出当前goroutine的执行权限，调度器安排其它等待的任务运行，并在下次某个时候从该位置恢复执行。<br> runtime.Goexit()，调用此函数会立即使当前的goroutine的运行终止（终止协程），而其它的goroutine并不会受此影响。runtime.Goexit在终止当前goroutine前会先执行此goroutine的还未执行的defer语句。请注意千万别在主函数调用runtime.Goexit，因为会引发panic。</p>',93)]))}]]),t=JSON.parse('{"path":"/%E5%85%B6%E4%BB%96/golang%20%E5%B8%B8%E8%A7%81%E5%9D%91.html","title":"golang常见坑","lang":"zh-CN","frontmatter":{"title":"golang常见坑","description":"2024 -11- 17 https://geektutu.com/post/hpg-string-concat.html 题目汇总 参考 : https://zhuanlan.zhihu.com/p/471490292 golang 什么是协程（Goroutine） ​ 协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/%E5%85%B6%E4%BB%96/golang%20%E5%B8%B8%E8%A7%81%E5%9D%91.html"}],["meta",{"property":"og:site_name","content":"ntom"}],["meta",{"property":"og:title","content":"golang常见坑"}],["meta",{"property":"og:description","content":"2024 -11- 17 https://geektutu.com/post/hpg-string-concat.html 题目汇总 参考 : https://zhuanlan.zhihu.com/p/471490292 golang 什么是协程（Goroutine） ​ 协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img2023.cnblogs.com/blog/3182848/202308/3182848-20230821211328513-1788770159.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T14:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T14:28:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"golang常见坑\\",\\"image\\":[\\"https://img2023.cnblogs.com/blog/3182848/202308/3182848-20230821211328513-1788770159.png\\",\\"https://pic3.zhimg.com/v2-b770e5632874d40780ecfe79701324f2_1440w.jpg\\"],\\"dateModified\\":\\"2024-12-23T14:28:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"notm\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是协程（Goroutine）","slug":"什么是协程-goroutine","link":"#什么是协程-goroutine","children":[{"level":3,"title":"线程创建方式","slug":"线程创建方式","link":"#线程创建方式","children":[]}]},{"level":2,"title":"性能排查","slug":"性能排查","link":"#性能排查","children":[]},{"level":2,"title":"如何高效地拼接字符串","slug":"如何高效地拼接字符串","link":"#如何高效地拼接字符串","children":[]},{"level":2,"title":"数组和切片区别","slug":"数组和切片区别","link":"#数组和切片区别","children":[]},{"level":2,"title":"切片常见操作","slug":"切片常见操作","link":"#切片常见操作","children":[]},{"level":2,"title":"Go 支持默认参数或可选参数吗","slug":"go-支持默认参数或可选参数吗","link":"#go-支持默认参数或可选参数吗","children":[]},{"level":2,"title":"？","slug":"","link":"#","children":[]},{"level":2,"title":"别名","slug":"别名","link":"#别名","children":[{"level":3,"title":"结构体打印时，%v 和 %+v 的区别","slug":"结构体打印时-v-和-v-的区别","link":"#结构体打印时-v-和-v-的区别","children":[]}]},{"level":2,"title":"iota","slug":"iota","link":"#iota","children":[{"level":3,"title":"如何知道一个对象是分配在栈上还是堆上？","slug":"如何知道一个对象是分配在栈上还是堆上","link":"#如何知道一个对象是分配在栈上还是堆上","children":[]},{"level":3,"title":"2 个 nil 可能不相等吗？","slug":"_2-个-nil-可能不相等吗","link":"#_2-个-nil-可能不相等吗","children":[]},{"level":3,"title":"GOlang GC","slug":"golang-gc","link":"#golang-gc","children":[]},{"level":3,"title":"非接口的任意类型 T() 都能够调用 *T 的方法吗？反过来呢？","slug":"非接口的任意类型-t-都能够调用-t-的方法吗-反过来呢","link":"#非接口的任意类型-t-都能够调用-t-的方法吗-反过来呢","children":[]},{"level":3,"title":"08 go slice是怎么扩容的？","slug":"_08-go-slice是怎么扩容的","link":"#_08-go-slice是怎么扩容的","children":[]},{"level":3,"title":"❤无缓冲的 channel 和有缓冲的 channel 的区别？","slug":"❤无缓冲的-channel-和有缓冲的-channel-的区别","link":"#❤无缓冲的-channel-和有缓冲的-channel-的区别","children":[]},{"level":3,"title":"为什么有协程泄露(Goroutine Leak)？","slug":"为什么有协程泄露-goroutine-leak","link":"#为什么有协程泄露-goroutine-leak","children":[]},{"level":3,"title":"Go 可以限制运行时操作系统线程的数量吗？ 常见的goroutine操作函数有哪些？","slug":"go-可以限制运行时操作系统线程的数量吗-常见的goroutine操作函数有哪些","link":"#go-可以限制运行时操作系统线程的数量吗-常见的goroutine操作函数有哪些","children":[]}]}],"git":{"createdTime":1734964134000,"updatedTime":1734964134000,"contributors":[{"name":"Yang Yang","username":"Yang Yang","email":"yangyang@YangdeMacBook-Air.local","commits":1,"url":"https://github.com/Yang Yang"}]},"readingTime":{"minutes":6.57,"words":1972},"filePathRelative":"其他/golang 常见坑.md","localizedDate":"2024年12月23日","autoDesc":true}')},6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}}}]);