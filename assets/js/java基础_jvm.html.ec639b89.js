"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5138],{1894:(l,e,i)=>{i.r(e),i.d(e,{comp:()=>p,data:()=>n});var a=i(641);const t={},p=(0,i(6262).A)(t,[["render",function(l,e){const i=(0,a.g2)("font");return(0,a.uX)(),(0,a.CE)("div",null,[e[4]||(e[4]=(0,a.Fv)('<h1 id="类加载机制" tabindex="-1"><a class="header-anchor" href="#类加载机制"><span>类加载机制</span></a></h1><h1 id="gc策略" tabindex="-1"><a class="header-anchor" href="#gc策略"><span>GC策略</span></a></h1><ul><li><p>对象优先分配在eden区</p></li><li><p>大对象直接分配在老年代</p></li><li><p>长期存活的对象分配在老年代</p><ul><li>进入survior 区 或者survior 每经历一次minor gc 年龄+1</li><li>累计年龄的对象数超过50%</li><li>默认年龄阈值15, cms默认6</li><li>取累计年龄和默认年龄的最小值</li></ul></li></ul><h2 id="gc分类" tabindex="-1"><a class="header-anchor" href="#gc分类"><span>GC分类</span></a></h2><p>partial GC:</p><ul><li>Young GC (Minor GC), 只收集young gen代的GC</li><li>Old GC ,只收集Old gen的GC</li><li>MixedGC 手机young gen和old gen 的GC, 只有G1支持这种模式</li></ul><p>Full GC:</p><ul><li>收集整个堆的数据,young gen、old gen、perm gen</li></ul>',8)),(0,a.bF)(i,{color:"red"},{default:(0,a.k6)((()=>e[0]||(e[0]=[(0,a.eW)("major gc 和full gc等价, 概念混乱,也有major gc和old gc等价的说法")]))),_:1}),e[5]||(e[5]=(0,a.Fv)(',<h2 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span>引用类型</span></a></h2><ul><li><p>强引用(Strong Reference)</p></li><li><p>弱引用(Weak Reference)</p><p>不管当前内存空间足够与否，都会回收它的内存,比Soft Reference 拥有更短的生命周期</p></li><li><p>软引用(Soft Reference)</p><p>内存空间不足时,进行回收</p></li><li><p>虚引用(Phantom Reference)</p><p>虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收</p></li></ul><h1 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池"><span>常量池</span></a></h1><p>字符串常量池位于堆中</p><p>运行时常量池位于方法区(元空间)</p><h2 id="如何判断一个类是无用的类" tabindex="-1"><a class="header-anchor" href="#如何判断一个类是无用的类"><span>如何判断一个类是无用的类</span></a></h2><ul><li>对象无引用</li><li>class 对象无引用, 无法通过反射生成对象实例</li><li>classloader 无引用</li></ul><h1 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法"><span>垃圾回收算法</span></a></h1><ul><li><p>标记清除</p></li><li><p>标记整理</p><p>老年代采用的回收算法</p></li><li><p>标记复制</p><p>新生代常采用算法, 分配担保</p></li><li><p>分代收集</p></li></ul><h1 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器"><span>垃圾收集器</span></a></h1><figure><img src="https://ask.qcloudimg.com/http-save/7851499/6eb59f5de3e722e59bf247b2ec1a01ed.jpeg?imageView2/2/w/1620" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>serial 收集器</li></ul><p>​ stop the world</p><ul><li>ParNew收集器</li></ul><p>​ ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。</p><ol><li>新生代采用标记-复制算法，</li><li>老年代采用标记-整理算法</li></ol><figure><img src="https://javaguide.cn/assets/22018368.df835851.png" alt="ParNew 收集器 " tabindex="0" loading="lazy"><figcaption>ParNew 收集器 </figcaption></figure><ul><li>Parallel Scanvage</li></ul><ol><li>使用标记-复制算法的多线程收集</li><li>提供系统的吞吐量, 提高系统cpu使用率</li><li>JDK1.8 默认使用的是 Parallel Scavenge + Parallel Old</li><li>新生代采用标记-复制算法，老年代采用标记-整理算法</li></ol><ul><li>serial old收集器</li></ul><ol><li>serial收集器的老年代版本</li><li>一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用</li><li>另一种用途是作为 CMS 收集器的后备方案</li></ol><p>parallel old</p><ol><li>parallel scanvatge的老年代版本</li><li>标记整理</li><li>和paralle scanvage 搭配使用 ,ps/po</li></ol><ul><li>cms收集器</li></ul>',25)),(0,a.Lk)("ol",null,[e[2]||(e[2]=(0,a.Lk)("li",null,[(0,a.Lk)("p",null,"concurrent mark swap 并发标记清除")],-1)),(0,a.Lk)("li",null,[(0,a.bF)(i,{color:"red"},{default:(0,a.k6)((()=>e[1]||(e[1]=[(0,a.eW)("无法清除浮动垃圾")]))),_:1})]),e[3]||(e[3]=(0,a.Fv)("<li><p>标记清除算法,会产生大量空间碎片</p></li><li><p>过程</p><p>和redis 增量同步方式相同</p><ul><li><p>初始标记</p></li><li><p>并发标记</p></li><li><p>重新标记</p></li><li><p>并发清楚</p></li></ul></li>",2))]),e[6]||(e[6]=(0,a.Fv)("<ul><li>G1收集器</li></ul><ol><li>G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的</li><li>过程 <ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul></li></ol><ul><li>ZGC</li></ul><p>​ 标记-复制的垃圾收集器</p>",4))])}]]),n=JSON.parse('{"path":"/java%E5%9F%BA%E7%A1%80/jvm.html","title":"类加载机制","lang":"zh-CN","frontmatter":{"description":"类加载机制 GC策略 对象优先分配在eden区 大对象直接分配在老年代 长期存活的对象分配在老年代 进入survior 区 或者survior 每经历一次minor gc 年龄+1 累计年龄的对象数超过50% 默认年龄阈值15, cms默认6 取累计年龄和默认年龄的最小值 GC分类 partial GC: Young GC (Minor GC), 只收...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/java%E5%9F%BA%E7%A1%80/jvm.html"}],["meta",{"property":"og:site_name","content":"ntom"}],["meta",{"property":"og:title","content":"类加载机制"}],["meta",{"property":"og:description","content":"类加载机制 GC策略 对象优先分配在eden区 大对象直接分配在老年代 长期存活的对象分配在老年代 进入survior 区 或者survior 每经历一次minor gc 年龄+1 累计年龄的对象数超过50% 默认年龄阈值15, cms默认6 取累计年龄和默认年龄的最小值 GC分类 partial GC: Young GC (Minor GC), 只收..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ask.qcloudimg.com/http-save/7851499/6eb59f5de3e722e59bf247b2ec1a01ed.jpeg?imageView2/2/w/1620"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T14:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T14:28:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类加载机制\\",\\"image\\":[\\"https://ask.qcloudimg.com/http-save/7851499/6eb59f5de3e722e59bf247b2ec1a01ed.jpeg?imageView2/2/w/1620\\",\\"https://javaguide.cn/assets/22018368.df835851.png\\"],\\"dateModified\\":\\"2024-12-23T14:28:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"notm\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"GC分类","slug":"gc分类","link":"#gc分类","children":[]},{"level":2,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]},{"level":2,"title":"如何判断一个类是无用的类","slug":"如何判断一个类是无用的类","link":"#如何判断一个类是无用的类","children":[]}],"git":{"createdTime":1734964134000,"updatedTime":1734964134000,"contributors":[{"name":"Yang Yang","username":"Yang Yang","email":"yangyang@YangdeMacBook-Air.local","commits":1,"url":"https://github.com/Yang Yang"}]},"readingTime":{"minutes":2.74,"words":822},"filePathRelative":"java基础/jvm.md","localizedDate":"2024年12月23日","autoDesc":true}')},6262:(l,e)=>{e.A=(l,e)=>{const i=l.__vccOpts||l;for(const[l,a]of e)i[l]=a;return i}}}]);