"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[436],{2733:(a,s,i)=>{i.r(s),i.d(s,{comp:()=>l,data:()=>p});var n=i(641);const e={},l=(0,i(6262).A)(e,[["render",function(a,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="java-锁" tabindex="-1"><a class="header-anchor" href="#java-锁"><span>java 锁</span></a></h1><p>自旋锁 实现cpu空转 会存在超时的情况</p><h2 id="reentrantlock" tabindex="-1"><a class="header-anchor" href="#reentrantlock"><span>ReentrantLock</span></a></h2><p>可重入锁: 巧用condition</p><p>用这个await 、notifyAll 可以实现线程通信,但是出现超时情况</p><h2 id="semaphore" tabindex="-1"><a class="header-anchor" href="#semaphore"><span>Semaphore</span></a></h2><p>交替打印:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FooBar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Semaphore</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fooS </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Semaphore</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> barS </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Semaphore</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FooBar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> printFoo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i++) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">             fooS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acquire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">             printFoo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">             barS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> printBar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i++) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            barS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acquire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            printBar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            fooS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h1><p>volatile实现比较轻量化</p><h1 id="cyclicbarrier" tabindex="-1"><a class="header-anchor" href="#cyclicbarrier"><span>CyclicBarrier</span></a></h1><div class="language-.java line-numbers-mode" data-highlighter="shiki" data-ext=".java" data-title=".java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class FizzBuzz {</span></span>\n<span class="line"><span>    private int n;</span></span>\n<span class="line"><span>    CyclicBarrier barrier = new CyclicBarrier(4);</span></span>\n<span class="line"><span>    public FizzBuzz(int n) {</span></span>\n<span class="line"><span>        this.n = n;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // printFizz.run() outputs &quot;fizz&quot;.</span></span>\n<span class="line"><span>    public void fizz(Runnable printFizz) throws InterruptedException {</span></span>\n<span class="line"><span>        for(int i=1;i&lt;=n;i++){</span></span>\n<span class="line"><span>            if(i%3==0 &amp;&amp; i%5!=0){</span></span>\n<span class="line"><span>                printFizz.run();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>             try{</span></span>\n<span class="line"><span>                    barrier.await(); // await 到点循环</span></span>\n<span class="line"><span>                }catch(Exception e){</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // printBuzz.run() outputs &quot;buzz&quot;.</span></span>\n<span class="line"><span>    public void buzz(Runnable printBuzz) throws InterruptedException {</span></span>\n<span class="line"><span>        for(int i=1;i&lt;=n;i++){</span></span>\n<span class="line"><span>            if(i%5==0&amp;&amp;i%3!=0){</span></span>\n<span class="line"><span>                printBuzz.run();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>             try{</span></span>\n<span class="line"><span>                    barrier.await();</span></span>\n<span class="line"><span>                }catch(Exception e){</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // printFizzBuzz.run() outputs &quot;fizzbuzz&quot;.</span></span>\n<span class="line"><span>    public void fizzbuzz(Runnable printFizzBuzz) throws InterruptedException {</span></span>\n<span class="line"><span>        for(int i=1;i&lt;=n;i++){</span></span>\n<span class="line"><span>            if(i%15==0){</span></span>\n<span class="line"><span>                printFizzBuzz.run();</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            try{</span></span>\n<span class="line"><span>                    barrier.await();</span></span>\n<span class="line"><span>                }catch(Exception e){</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // printNumber.accept(x) outputs &quot;x&quot;, where x is an integer.</span></span>\n<span class="line"><span>    public void number(IntConsumer printNumber) throws InterruptedException {</span></span>\n<span class="line"><span>        for(int i=1;i&lt;=n;i++){</span></span>\n<span class="line"><span>            if(i%3!=0&amp;&amp;i%5!=0){</span></span>\n<span class="line"><span>                printNumber.accept(i);</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            try{</span></span>\n<span class="line"><span>                    barrier.await();</span></span>\n<span class="line"><span>                }catch(Exception e){</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        </span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka"><span>kafka</span></a></h1><h2 id="offset管理" tabindex="-1"><a class="header-anchor" href="#offset管理"><span>offset管理</span></a></h2><ol><li>每个consumer内存里数据结构保存对每个topic的每个分区的消费offset，定期会提交offset，老版本是写入zk，但是那样高并发请求zk是不合理的架构设计，zk是做分布式系统的协调的，轻量级的元数据存储，不能负责高并发读写，作为数据存储。</li><li>现在新的版本提交offset发送给kafka内部topic：__consumer_offsets，提交过去的时候， key是group.id+topic+分区号，value就是当前offset的值，每隔一段时间，kafka内部会对这个topic进行compact(合并)，也就是每个group.id+topic+分区号就保留最新数据。</li><li>__consumer_offsets可能会接收高并发的请求，所以默认分区50个(leader partitiron -&gt; 50 kafka)，这样如果你的kafka部署了一个大的集群，比如有50台机器，就可以用50台机器来抗offset提交的请求压力.</li></ol><h2 id="时间轮" tabindex="-1"><a class="header-anchor" href="#时间轮"><span>时间轮</span></a></h2><p>​ 循环数组 + 链表</p><p>​ 使用地方:</p><ul><li>leader向follow发送数据 ,维护时间轮 ,控制超时</li><li>follow 向 leader 拉取数据的时候 ,如果拉去的数据为空, 维护时间轮, 过段时间在拉取</li></ul><h2 id="io模型" tabindex="-1"><a class="header-anchor" href="#io模型"><span>io模型</span></a></h2><p>基于nio io多路复用</p><ul><li>多个selector监听机制 ?</li><li>读请求维护一个队列 ?</li></ul><h2 id="高性能写" tabindex="-1"><a class="header-anchor" href="#高性能写"><span>高性能写</span></a></h2><p>​ 基于mmap , 顺序写</p><h2 id="高性能读" tabindex="-1"><a class="header-anchor" href="#高性能读"><span>高性能读</span></a></h2><p>​ 使用零拷贝技术 , 避免无用的内存拷贝</p><p>​ 零copy</p><p>零拷贝技术实现的方式通常有 2 种：</p><ul><li>mmap + write</li><li>sendfile</li></ul><p>kafka调用java的transfer 接口,底层使用的是sendfile技术,pagecache(通过预读的方式)进一步提升零拷贝的性能,</p><p>直接io: 跳过内核cache,用户cache和磁盘数据进行交互</p><h2 id="controller作用" tabindex="-1"><a class="header-anchor" href="#controller作用"><span>controller作用</span></a></h2><p>​ 维护集群元数据信息, 分区选主 ,</p><h2 id="rebalance" tabindex="-1"><a class="header-anchor" href="#rebalance"><span>rebalance</span></a></h2><p>​ coordinator 每个consumer group都会选择一个broker作为自己的coordinator，他是负责监控这个消费组里的各个消费者的心跳，以及判断是否宕机，然后开启rebalance的.</p><p>​ 如何选择coordinator机器 首先对groupId进行hash（数字），接着对__consumer_offsets的分区数量取模，默认是50，_consumer_offsets的分区数可以通过offsets.topic.num.partitions来设置，找到分区以后，这个分区所在的broker机器就是coordinator机器。比如说：groupId，“myconsumer_group” -&gt; hash值（数字）-&gt; 对50取模 -&gt; 8 __consumer_offsets 这个主题的8号分区在哪台broker上面，那一台就是coordinator 就知道这个consumer group下的所有的消费者提交offset的时候是往哪个分区去提交offset</p><h2 id="消费策略" tabindex="-1"><a class="header-anchor" href="#消费策略"><span>消费策略</span></a></h2><ul><li>range 按分区数量划分,</li><li>round-robin 轮训</li><li>sticky (range + sticky)</li></ul><h2 id="集群规划" tabindex="-1"><a class="header-anchor" href="#集群规划"><span>集群规划</span></a></h2><p>​ 考虑并发、内存</p><p>​ 机械硬盘</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><ul><li><p>Kafka存储在硬盘上的消息格式是什么？</p><p>一般的协议数据格式 : 版本号、消息长度、校验码 --- 具体消息</p></li><li><p>Kafka高效文件存储设计特点：</p><p>一个partiton 对应一个文件, 分多段,每段大小固定 (.log、.index) , 方便滚动删除 , 对.log文件进行索引, 并全部映射到内存, 通过二分查找index, 快速定位文件位置</p><p>topic的分区分配到broker 上由controller节点控制, 随机落在一个接点上 ,轮询分配</p><p>数据存储在logs.dir、log.dirs上 ,分区目录最少的有限分配</p></li></ul><h1 id="go" tabindex="-1"><a class="header-anchor" href="#go"><span>GO</span></a></h1><h2 id="slice底层实现" tabindex="-1"><a class="header-anchor" href="#slice底层实现"><span>Slice底层实现</span></a></h2><h2 id="map-底层实现" tabindex="-1"><a class="header-anchor" href="#map-底层实现"><span>Map 底层实现</span></a></h2><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><h2 id="gmp" tabindex="-1"><a class="header-anchor" href="#gmp"><span>GMP</span></a></h2><h2 id="管道" tabindex="-1"><a class="header-anchor" href="#管道"><span>管道</span></a></h2><p>​ channel 底层实现原理 :</p><h2 id="协程" tabindex="-1"><a class="header-anchor" href="#协程"><span>协程</span></a></h2><p>​ 和线程、线程对比</p><h1 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>http</span></a></h1><h2 id="各版本区别" tabindex="-1"><a class="header-anchor" href="#各版本区别"><span>各版本区别</span></a></h2><ul><li>1.0 都需要进行一次tcp连接（即3次握手4次挥手），使得网络的利用率非常低,HTTP 1.0 规定在前一个请求响应到达之后下一个请求才能发送，如果前一个阻塞，后面的请求也给阻塞的</li><li>1.1 基于长链接(使用keep-alive参数保证链接不断),默认保持长连接，数据传输完成保持tcp连接不断开,继续用这个通道传输数据,管线化保证发送批量数据 、但是接收端还是得一个个进行处理</li><li>2.0 头部压缩 , 二进制编码, 多路复用： 在共享TCP链接的基础上同时发送请求和响应</li><li>3.0 基于udp传输,解决tcp 对头阻塞问题 , 基于quic协议进行</li></ul><h2 id="长链接" tabindex="-1"><a class="header-anchor" href="#长链接"><span>长链接</span></a></h2><h2 id="短链接" tabindex="-1"><a class="header-anchor" href="#短链接"><span>短链接</span></a></h2><h2 id="长轮询" tabindex="-1"><a class="header-anchor" href="#长轮询"><span>长轮询</span></a></h2><p>​ 客户端发送一个请求，服务器保持连接打开，直到有新数据或超时。</p><h2 id="短轮询" tabindex="-1"><a class="header-anchor" href="#短轮询"><span>短轮询</span></a></h2><p>​ 客户端频繁发送请求，服务器及时响应，不管是否有新数据</p><h2 id="配置中心长轮询" tabindex="-1"><a class="header-anchor" href="#配置中心长轮询"><span>配置中心长轮询</span></a></h2><p>Spring Cloud Config使用长轮询（Long Polling）机制来实现实时获取配置更新的功能。这意味着客户端向配置服务器发送请求，并保持连接打开，直到有新的配置更新或超时发生。</p><p>当客户端向Spring Cloud Config服务器发送配置获取请求时，服务器会在配置更新时立即返回响应，并传递最新的配置信息给客户端。如果没有新的配置更新，服务器会将连接保持一段时间，等待配置的变更事件发生。如果超时时间到达而没有新的配置变更，则服务器会发送一个特殊的响应，指示客户端重新发送配置获取请求。</p><p>通过使用长轮询，Spring Cloud Config可以实现实时的配置更新推送。相对于短轮询，长轮询能够减少无效的请求发送频率，降低了服务器和网络的负载，同时提供了更好的实时性和有效性。</p><p>因此，Spring Cloud Config采用长轮询作为默认的配置获取机制，以实现实时的配置更新推送，提供更好的用户体验和性能。</p><h1 id="hydrix-断路器" tabindex="-1"><a class="header-anchor" href="#hydrix-断路器"><span>hydrix 断路器</span></a></h1><p>故障大于50% ,开启状态, 5秒后, 处于半开状态 ,释放一部分流量 , 如果还是失败继续处于开启状态</p><h1 id="volatile-1" tabindex="-1"><a class="header-anchor" href="#volatile-1"><span>volatile</span></a></h1><p>请谈谈volatile有什么特点，为什么它能保证变量对所有线程的可见性？</p><p>volatile 能保证变量对所有线程的可见性的原理是基于 CPU 缓存一致性协议。在多核处理器中，每个 CPU 都有自己的缓存，这些缓存中存储了主存中的部分数据副本。当一个线程修改了某个变量的值时，它会将修改后的值写回到主存中，并通知其他 CPU 缓存该变量的值已经发生了改变。当其他线程访问该变量时，它们会从主存中读取最新的值，而不是从自己的缓存中读取旧的值</p><h2 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal"><span>ThreadLocal</span></a></h2><p>使用注意事项:</p><ul><li>需要考虑 内存泄漏问题 , 使用完及时的remove, ThreadLocal惰性删除 ,本身就会删除</li><li>线程池问题 , 会有些垃圾数据 ,注意使用场景</li></ul><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>redis</span></a></h2><ul><li><p>缓存穿透 : 没有的key 穿透</p></li><li><p>缓存击穿: 热key过期</p></li><li><p>缓存雪崩: 同一时间点, 大面积key过期</p></li></ul><h1 id="网络模型" tabindex="-1"><a class="header-anchor" href="#网络模型"><span>网络模型</span></a></h1><h2 id="七层模型" tabindex="-1"><a class="header-anchor" href="#七层模型"><span>七层模型</span></a></h2><p>​ 物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p><h2 id="四层模型" tabindex="-1"><a class="header-anchor" href="#四层模型"><span>四层模型</span></a></h2><p>​ 数据链路层、网络层、传输层、应用层</p><h2 id="arp" tabindex="-1"><a class="header-anchor" href="#arp"><span>ARP</span></a></h2><p>​ address resolution protocol, 地址解析协议 ,解析ip和mac地址映射关系</p><h2 id="nat" tabindex="-1"><a class="header-anchor" href="#nat"><span>NAT</span></a></h2><p>​ net address translation , nat地址转换 , 转换ip地址为公网地址</p><h2 id="四次握手" tabindex="-1"><a class="header-anchor" href="#四次握手"><span>四次握手</span></a></h2><p>![image-20230706144230359](/Users/wuguangkuo/Library/Application Support/typora-user-images/image-20230706144230359.png)</p><h2 id="问题-1" tabindex="-1"><a class="header-anchor" href="#问题-1"><span>问题</span></a></h2><ul><li>如果已经建立了连接，但客户端出现了故障怎么办？</li></ul><p>​ 服务端维持计时器, 每隔一段时间重试,超过一定次数,直接断开连接</p><ul><li><p>如果第二次挥手时服务器的ACK没有送达客户端，会怎样？</p><p>客户端没有收到ACK确认，会重新发送FIN请求。</p></li><li><p>客户端TIME_WAIT状态的意义是什么？</p><p>第四次挥手时，客户端发送给服务器的ACK有可能丢失，TIME_WAIT状态就是用来重发可能丢失的ACK报文。如果Server没有收到ACK，就会重发FIN.</p></li></ul><h2 id="缓存机制" tabindex="-1"><a class="header-anchor" href="#缓存机制"><span>缓存机制</span></a></h2><ul><li>强制缓存, 通过返回请求头的,cache-control, expire字段进行确认</li><li>协商缓存, 通过返回的etag,last-modify的返回头进行确认,下次访问的时候(请求头If-Modified-Since,I<code>f-None-Match</code> )带上对应etag和最后修改的信息, 服务进行判断,304</li></ul><h2 id="https工作原理" tabindex="-1"><a class="header-anchor" href="#https工作原理"><span>HTTPS工作原理</span></a></h2><p>一、首先HTTP请求服务端生成证书，客户端对证书的有效期、合法性、域名是否与请求的域名一致、证书的公钥（RSA加密）等进行校验；</p><p>二、客户端生成会话密钥：客户端使用服务器的公钥（从证书中获取）来加密生成一个会话密钥，该密钥将用于双方进行对称加密通信。这样客户端可以确保只有持有服务器私钥的服务器能够解密会话密钥。</p><p>三、握手阶段：客户端将会话密钥加密并发送给服务器。服务器使用私钥解密会话密钥，然后双方就可以使用该会话密钥进行加密和解密通信。</p><p>四、客户端和服务器之间的后续通信和数据传输都是使用会话密钥进行加密和解密的，确保数据的机密性和完整性。</p><h1 id="网络模型-reactor" tabindex="-1"><a class="header-anchor" href="#网络模型-reactor"><span>网络模型(reactor)</span></a></h1><h2 id="单线程reator、单线程" tabindex="-1"><a class="header-anchor" href="#单线程reator、单线程"><span>单线程reator、单线程</span></a></h2><h2 id="单线程reactor、多线程" tabindex="-1"><a class="header-anchor" href="#单线程reactor、多线程"><span>单线程reactor、多线程</span></a></h2><h2 id="多线程reactor-、单线程-不常用" tabindex="-1"><a class="header-anchor" href="#多线程reactor-、单线程-不常用"><span>多线程reactor 、单线程,不常用</span></a></h2><h2 id="多线程reator、多线程" tabindex="-1"><a class="header-anchor" href="#多线程reator、多线程"><span>多线程reator、多线程</span></a></h2><h2 id="ouath-协议工作流程" tabindex="-1"><a class="header-anchor" href="#ouath-协议工作流程"><span>ouath 协议工作流程</span></a></h2><ol><li>注册应用程序：客户端向授权服务器注册，并获得客户端ID和客户端密钥。</li><li>请求授权：客户端跳转到授权服务器，并请求访问用户受保护资源的授权。请求中包含客户端ID、请求访问的范围和重定向URL等信息。</li><li>用户授权：用户在授权服务器上登录，并选择是否授权客户端访问其受保护资源。</li><li>授权颁发：授权服务器向客户端颁发授权令牌（Access Token）。授权令牌将用于后续的资源请求。</li><li>访问受保护资源：客户端将授权令牌附加到资源请求中，并发送给资源服务器。</li><li>验证授权：资源服务器验证授权令牌的有效性，并根据用户的授权范围来限制访问。</li><li>提供受保护资源：如果授权有效，则资源服务器提供所请求的受保护资源给客户端。</li></ol><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span><img src="https://pic2.zhimg.com/80/v2-8d626a3f8af30d7c36ebadf2894af571_1440w.webp" alt="img" loading="lazy"></span></a></h2><h1 id="springcloud组件" tabindex="-1"><a class="header-anchor" href="#springcloud组件"><span>springcloud组件</span></a></h1><h2 id="spring-cloud-eureka" tabindex="-1"><a class="header-anchor" href="#spring-cloud-eureka"><span>Spring Cloud Eureka：</span></a></h2><p>​ 服务注册与发现</p><p>Eureka的自我保护机制: 默认情况下，如果Eureka Service在一定时间内没有接收到某个微服务的心跳，Eureka Service会进入自我保护模式，在该模式下Eureka Service会保护服务注册表中的信息，不在删除注册表中的数据，当网络故障恢复后，Eureka Servic节点会自动退出自我保护模式</p><pre><code>\teureka 和 zookeeper区别?\n</code></pre><p>​ 1.ZooKeeper中的节点服务挂了就要选举在选举期间注册服务瘫痪,虽然服务最终会恢复,但是选举期间不可用的，选举就是改微服务做了集群，必须有一台主其他的都是从</p><ol start="2"><li>Eureka各个节点是平等关系,服务器挂了没关系，只要有一台Eureka就可以保证服务可用，数据都是最新的。如果查询到的数据并不是最新的，就是因为Eureka的自我保护模式导致的</li><li>ZooKeeper保证的是CP，Eureka保证的是AP</li></ol><p>Spring Cloud Zuul：服务网关</p><p>Spring Cloud Ribbon：客户端负载均衡</p><p>Spring Cloud Feign：声明性的Web服务客户端</p><h2 id="spring-cloud-hystrix-断路器" tabindex="-1"><a class="header-anchor" href="#spring-cloud-hystrix-断路器"><span>Spring Cloud Hystrix：断路器</span></a></h2><ul><li><p>服务降级：当客户端请求服务器端的时候，防止客户端一直等待，不会处理业务逻辑代码，直接返回一个友好的提示给客户端。实战: Hystrix实现服务降级的功能是通过重写HystrixCommand中的getFallback()方法，当Hystrix的run方法或construct执行发生错误时转而执行getFallback()方法。</p></li><li><p>服务熔断是在服务降级的基础上更直接的一种保护方式，当在一个统计时间范围内的请求失败数量达到设定值（requestVolumeThreshold）或当前的请求错误率达到设定的错误率阈值（errorThresholdPercentage）时开启断路，之后的请求直接走fallback方法，在设定时间（sleepWindowInMilliseconds）后尝试恢复。</p></li><li><p>服务隔离就是Hystrix为隔离的服务开启一个独立的线程池，这样在高并发的情况下不会影响其他服务。服务隔离有线程池和信号量两种实现方式，一般使用线程池方式。</p></li></ul><p>Spring Cloud Config：分布式统一配置管理</p><p>限流器: guava ratelimit 、resilience4j、 sentinl限流</p><h1 id="elasticsearch" tabindex="-1"><a class="header-anchor" href="#elasticsearch"><span>elasticsearch</span></a></h1><h2 id="分片规划" tabindex="-1"><a class="header-anchor" href="#分片规划"><span>分片规划</span></a></h2><p>​ 每个分片容量20G-50G左右 ,</p><p>​ 账号库12亿数据 ,线上28个节点, 3T数据,76个分片,</p><h2 id="redis-1" tabindex="-1"><a class="header-anchor" href="#redis-1"><span>Redis</span></a></h2><p>Redis 集群, 线上分片24个,4GB ,1个副本, 规划容量100G</p><h2 id="homo-redis" tabindex="-1"><a class="header-anchor" href="#homo-redis"><span>homo redis</span></a></h2><p>16个分片共 32g ,1副本,规划容量80G</p><h1 id="clickhouse" tabindex="-1"><a class="header-anchor" href="#clickhouse"><span>clickhouse</span></a></h1><p>线上40个节点 ,128G内存,96c, 总容量500T, 已使用400T,</p><h1 id="db" tabindex="-1"><a class="header-anchor" href="#db"><span>db</span></a></h1><p>10个数据库, 然后分表,每个库60张表,</p><h1 id="算法" tabindex="-1"><a class="header-anchor" href="#算法"><span>算法</span></a></h1><p>java 常用函数</p><p>new ArrayList(); // 构造函数里面直接加数组</p><h1 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>jvm</span></a></h1><p>常用工具</p><ul><li>jps 查看进程</li><li>jinfo 运行环境信息,classpath、javasystem 信息</li><li>jstat 监控各种运行状态</li><li>jstack 线程运行情况 (死锁)</li><li>jmap 查看物理内存使用情况</li></ul><p>GC:</p><ul><li><p>minor gc 新生代</p></li><li><p>major gc 老年代</p></li><li><p>fullgc system.gc 、方区空间不足</p></li></ul><p>HotSpot虚拟机中，Eden区和Survivor区的默认比例为<strong>8:1:1</strong>，即-XX:SurvivorRatio=8， 其中Survivor分为From Survivor和ToSurvivor，因此Eden此时占新生代空间的80%</p><h2 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏"><span>内存泄漏</span></a></h2><p>数据无法回收 ,ThreadLocal</p><h2 id="内存溢出" tabindex="-1"><a class="header-anchor" href="#内存溢出"><span>内存溢出</span></a></h2><p>分配数据时,内存不够使用</p><h2 id="问题排查" tabindex="-1"><a class="header-anchor" href="#问题排查"><span>问题排查</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>\n<span class="line"><span>- jps 查看java端口</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- top  -H -p {进程id} 查看进程对应的线程使用情况</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- jstack  -l {pid} |grep {printf &quot;0x%x&quot; [线程id]}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>mysql</span></a></h2><h2 id="执行过程" tabindex="-1"><a class="header-anchor" href="#执行过程"><span>执行过程</span></a></h2><p>连接器、分析器、优化器、执行器</p><p>存储引擎</p><h2 id="查询缓存" tabindex="-1"><a class="header-anchor" href="#查询缓存"><span>查询缓存</span></a></h2><p>8.0之后去除, 基于表的查询缓存, 表有更新,整个缓存全部删除</p><h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>java</span></a></h1><h2 id="动态加载类框架" tabindex="-1"><a class="header-anchor" href="#动态加载类框架"><span>动态加载类框架</span></a></h2><ul><li>reflect</li><li>aop动态代理</li><li>Java Instrumentation API 增强字节码 , 动态修改、添加、删除模块</li></ul><h1 id="go-1" tabindex="-1"><a class="header-anchor" href="#go-1"><span>GO</span></a></h1><p>原文链接: <a href="https://juejin.cn/post/7226153290051141692" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7226153290051141692</a></p><h2 id="slice" tabindex="-1"><a class="header-anchor" href="#slice"><span>slice</span></a></h2><p>数组、len、cap 结构</p><p>扩容2倍, ,cap&gt;1024扩容 1.25倍</p><p>java arraylist 扩容是1.5倍, 扩容之后任不够使用,扩容至所需的容量</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map:</span></a></h2><p>底层基于 hmap 实现 ,hamp是一个bucket数组结构, 数组里面的每一个bmap是一个bmap结构,每个桶中保存了8个kv对，如果8个满了，又来了一个key落在了这个桶里，会使用overflow连接下一个桶(溢出桶)</p><p>扩容: 扩容条件</p><p>1、负载因&gt; 6.5 , count/bucket数组&gt; 6.5</p><p>2、溢出桶过多, 当B&lt; 15时 ,溢出桶 &gt; 2^B</p><p>B&gt;15时, 溢出桶&gt; 2^15</p><p>扩容方式:</p><p>等量扩容: (缩容)</p><p>2倍扩容</p><h2 id="rehash" tabindex="-1"><a class="header-anchor" href="#rehash"><span>rehash</span></a></h2><p>将新数组的容量设置为旧数组的两倍或一半，并且将哈希表的增量计数器加一。</p><p>在对哈希表进行操作时，如果发现增量计数器的值达到了一个阈值，就会开始进行增量式 rehash 操作，将一部分元素从旧数组中复制到新数组中，并且重新计算这些元素的哈希值。</p><p>在完成一次增量式 rehash 操作后，会将哈希表的增量计数器清零。</p><h2 id="gmp模型" tabindex="-1"><a class="header-anchor" href="#gmp模型"><span>GMP模型:</span></a></h2><h2 id="spring-为什么需要三级缓存解决循环依赖问题" tabindex="-1"><a class="header-anchor" href="#spring-为什么需要三级缓存解决循环依赖问题"><span>Spring 为什么需要三级缓存解决循环依赖问题</span></a></h2><p>实例化和属性设置 分开 , 会涉及到一些代理对象的使用 , 这些是放在第三级缓存里的 , 如果只有两级缓存, 没办法 区分 bean 对象处理属性设置还是bean 代理</p><h2 id="springboot启动流程" tabindex="-1"><a class="header-anchor" href="#springboot启动流程"><span>springboot启动流程</span></a></h2><p>SpringBootApplication 注解 ,包含 componetscan注解,启动时,会自动拉取jar下的metainfo/spring.factory文件中定义的bean信息, 做好自动装配 , @SpringBootConfiguration注解</p><h2 id="explain语句" tabindex="-1"><a class="header-anchor" href="#explain语句"><span>explain语句</span></a></h2><p>type :ALL-&gt;const(主键或者唯一索引)-&gt; eq_ref(主键或者唯一索引)-&gt;ref(普通索引)</p><p>keys : 实际走的索引</p><p>possible_keys : 可能用到的索引</p><h2 id="三级缓存" tabindex="-1"><a class="header-anchor" href="#三级缓存"><span>三级缓存</span></a></h2><p>三级缓存存在的原因主要原因有两个，一是因为AOP，二是循环依赖。如果没有Spring AOP和循环依赖，那么就不需要使用三级缓存</p><ul><li>一级缓存存放完全实力化的bean</li><li>二级缓存存放还没有完全实例化的bean</li><li>三级缓存存放需要aop功能等代理生成的bean</li></ul><p>如果没有AOP的话确实可以两级缓存就可以解决循环依赖的问题，如果加上AOP，两级缓存是无法解决的，不可能每次执行singleFactory.getObject()方法都给我产生一个新的代理对象，所以还要借助另外一个缓存来保存产生的代理对象</p><h2 id="gc" tabindex="-1"><a class="header-anchor" href="#gc"><span>gc</span></a></h2><p>GC 耗时增大、线程 Block 增多、慢查询增多、CPU 负载高等四个表象，如何判断哪个是根因</p><p>入侵检测、ddos 、业务安全、 数据安全、 网络安全</p><h2 id="两阶段提交" tabindex="-1"><a class="header-anchor" href="#两阶段提交"><span>两阶段提交</span></a></h2><img src="/Users/yangyang/面试资料/docs/9120d8585f644a4ca59ed882f488cc28~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp.png" alt="img" style="zoom:50%;"><p>先prepare redolog 、提交binlog ，最后commit redolog</p><h2 id="缓存更新策略" tabindex="-1"><a class="header-anchor" href="#缓存更新策略"><span>缓存更新策略</span></a></h2><p>先更新数据库、后删除缓存 适合读多写少的场景</p><p>删除缓存 、更新数据数据、 （隔段时间仅需删除）删除缓存， 延时双删策略</p><h2 id="云原生" tabindex="-1"><a class="header-anchor" href="#云原生"><span>云原生</span></a></h2><ul><li>DevOps， 持续集成</li><li>持续交付， cd</li><li>微服务,</li><li>容器 : docker技术， 容器编排、调度、扩容、迁移</li><li>把服务网格(Service Mesh) ：如果用一句话来解释什么是服务网格，可以将它比作是应用程序或者说微服务间的 TCP/IP，负责服务之间的网络调用、限流、熔断和监控。对于编写应用程序来说一般无须关心 TCP/IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用服务网格也就无须关系服务之间的那些原来是通过应用程序或者其他框架实现的事情，比如 Spring Cloud、OSS，现在只要交给服务网格就可以了</li><li>声明式API</li></ul><p>serverless FASS 数据服务平台</p><p>SAAS: 多租户设计模式，订阅付费，数据隔离、权限隔离、服务隔离，</p><ul><li>所有租户使用同一数据源下同一数据库下共同数据表（单数据源单数据库单数据表）</li><li>所有租户使用同一数据源下同一数据库下不同数据表（单数据源单数据库多数据表）</li><li>所有租户使用同一数据源下不同数据库下不同数据表（单数据源多数据库多数据表）</li><li>所有租户使用不同数据源下不同数据库下不同数据表（多数据源多数据库多数据表）</li></ul><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h2><h3 id="常用设计" tabindex="-1"><a class="header-anchor" href="#常用设计"><span>常用设计</span></a></h3><p>代理模式</p><p>责任链模式</p><p>适配器模式</p><p>模版模式</p><p>命令模式</p><p>工厂模式</p><p>策略模式， 表驱动</p><p>观察者模式，事件驱动， ApplicationEvent ， SpringSession里面也有类似的监听机制</p><p>Option 模式（go特有）</p><h3 id="solid原则" tabindex="-1"><a class="header-anchor" href="#solid原则"><span>solid原则</span></a></h3><p>SRP： single responsbility principle 单一职责原则</p><p>OCP： 开闭原则， 对修改关闭，允许修改</p><p>LSP： 里氏替换原则，一个对象在其出现的任何地方，都可以用子类实例做替换，并且不会导致程序的错误</p><p>ISP： 接口隔离原则，接口需要满足最小粒度，代码依赖于对应的接口，</p><p>DIP：依赖倒置原则，抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对抽象（接口）编程，而不是针对实现细节编程。</p><p>​</p>',220)]))}]]),p=JSON.parse('{"path":"/%E5%85%B6%E4%BB%96/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA.html","title":"查漏补缺","lang":"zh-CN","frontmatter":{"title":"查漏补缺","description":"java 锁 自旋锁 实现cpu空转 会存在超时的情况 ReentrantLock 可重入锁: 巧用condition 用这个await 、notifyAll 可以实现线程通信,但是出现超时情况 Semaphore 交替打印: volatile volatile实现比较轻量化 CyclicBarrier kafka offset管理 每个consume...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/%E5%85%B6%E4%BB%96/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA.html"}],["meta",{"property":"og:site_name","content":"ntom"}],["meta",{"property":"og:title","content":"查漏补缺"}],["meta",{"property":"og:description","content":"java 锁 自旋锁 实现cpu空转 会存在超时的情况 ReentrantLock 可重入锁: 巧用condition 用这个await 、notifyAll 可以实现线程通信,但是出现超时情况 Semaphore 交替打印: volatile volatile实现比较轻量化 CyclicBarrier kafka offset管理 每个consume..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Users/wuguangkuo/Library/Application Support/typora-user-images/image-20230706144230359.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T14:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T14:28:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"查漏补缺\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/Users/wuguangkuo/Library/Application Support/typora-user-images/image-20230706144230359.png\\",\\"https://pic2.zhimg.com/80/v2-8d626a3f8af30d7c36ebadf2894af571_1440w.webp\\"],\\"dateModified\\":\\"2024-12-23T14:28:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"notm\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"ReentrantLock","slug":"reentrantlock","link":"#reentrantlock","children":[]},{"level":2,"title":"Semaphore","slug":"semaphore","link":"#semaphore","children":[]},{"level":2,"title":"offset管理","slug":"offset管理","link":"#offset管理","children":[]},{"level":2,"title":"时间轮","slug":"时间轮","link":"#时间轮","children":[]},{"level":2,"title":"io模型","slug":"io模型","link":"#io模型","children":[]},{"level":2,"title":"高性能写","slug":"高性能写","link":"#高性能写","children":[]},{"level":2,"title":"高性能读","slug":"高性能读","link":"#高性能读","children":[]},{"level":2,"title":"controller作用","slug":"controller作用","link":"#controller作用","children":[]},{"level":2,"title":"rebalance","slug":"rebalance","link":"#rebalance","children":[]},{"level":2,"title":"消费策略","slug":"消费策略","link":"#消费策略","children":[]},{"level":2,"title":"集群规划","slug":"集群规划","link":"#集群规划","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"Slice底层实现","slug":"slice底层实现","link":"#slice底层实现","children":[]},{"level":2,"title":"Map 底层实现","slug":"map-底层实现","link":"#map-底层实现","children":[]},{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":2,"title":"GMP","slug":"gmp","link":"#gmp","children":[]},{"level":2,"title":"管道","slug":"管道","link":"#管道","children":[]},{"level":2,"title":"协程","slug":"协程","link":"#协程","children":[]},{"level":2,"title":"各版本区别","slug":"各版本区别","link":"#各版本区别","children":[]},{"level":2,"title":"长链接","slug":"长链接","link":"#长链接","children":[]},{"level":2,"title":"短链接","slug":"短链接","link":"#短链接","children":[]},{"level":2,"title":"长轮询","slug":"长轮询","link":"#长轮询","children":[]},{"level":2,"title":"短轮询","slug":"短轮询","link":"#短轮询","children":[]},{"level":2,"title":"配置中心长轮询","slug":"配置中心长轮询","link":"#配置中心长轮询","children":[]},{"level":2,"title":"ThreadLocal","slug":"threadlocal","link":"#threadlocal","children":[]},{"level":2,"title":"redis","slug":"redis","link":"#redis","children":[]},{"level":2,"title":"七层模型","slug":"七层模型","link":"#七层模型","children":[]},{"level":2,"title":"四层模型","slug":"四层模型","link":"#四层模型","children":[]},{"level":2,"title":"ARP","slug":"arp","link":"#arp","children":[]},{"level":2,"title":"NAT","slug":"nat","link":"#nat","children":[]},{"level":2,"title":"四次握手","slug":"四次握手","link":"#四次握手","children":[]},{"level":2,"title":"问题","slug":"问题-1","link":"#问题-1","children":[]},{"level":2,"title":"缓存机制","slug":"缓存机制","link":"#缓存机制","children":[]},{"level":2,"title":"HTTPS工作原理","slug":"https工作原理","link":"#https工作原理","children":[]},{"level":2,"title":"单线程reator、单线程","slug":"单线程reator、单线程","link":"#单线程reator、单线程","children":[]},{"level":2,"title":"单线程reactor、多线程","slug":"单线程reactor、多线程","link":"#单线程reactor、多线程","children":[]},{"level":2,"title":"多线程reactor 、单线程,不常用","slug":"多线程reactor-、单线程-不常用","link":"#多线程reactor-、单线程-不常用","children":[]},{"level":2,"title":"多线程reator、多线程","slug":"多线程reator、多线程","link":"#多线程reator、多线程","children":[]},{"level":2,"title":"ouath 协议工作流程","slug":"ouath-协议工作流程","link":"#ouath-协议工作流程","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"Spring Cloud Eureka：","slug":"spring-cloud-eureka","link":"#spring-cloud-eureka","children":[]},{"level":2,"title":"Spring Cloud Hystrix：断路器","slug":"spring-cloud-hystrix-断路器","link":"#spring-cloud-hystrix-断路器","children":[]},{"level":2,"title":"分片规划","slug":"分片规划","link":"#分片规划","children":[]},{"level":2,"title":"Redis","slug":"redis-1","link":"#redis-1","children":[]},{"level":2,"title":"homo redis","slug":"homo-redis","link":"#homo-redis","children":[]},{"level":2,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[]},{"level":2,"title":"内存溢出","slug":"内存溢出","link":"#内存溢出","children":[]},{"level":2,"title":"问题排查","slug":"问题排查","link":"#问题排查","children":[]},{"level":2,"title":"mysql","slug":"mysql","link":"#mysql","children":[]},{"level":2,"title":"执行过程","slug":"执行过程","link":"#执行过程","children":[]},{"level":2,"title":"查询缓存","slug":"查询缓存","link":"#查询缓存","children":[]},{"level":2,"title":"动态加载类框架","slug":"动态加载类框架","link":"#动态加载类框架","children":[]},{"level":2,"title":"slice","slug":"slice","link":"#slice","children":[]},{"level":2,"title":"Map:","slug":"map","link":"#map","children":[]},{"level":2,"title":"rehash","slug":"rehash","link":"#rehash","children":[]},{"level":2,"title":"GMP模型:","slug":"gmp模型","link":"#gmp模型","children":[]},{"level":2,"title":"Spring 为什么需要三级缓存解决循环依赖问题","slug":"spring-为什么需要三级缓存解决循环依赖问题","link":"#spring-为什么需要三级缓存解决循环依赖问题","children":[]},{"level":2,"title":"springboot启动流程","slug":"springboot启动流程","link":"#springboot启动流程","children":[]},{"level":2,"title":"explain语句","slug":"explain语句","link":"#explain语句","children":[]},{"level":2,"title":"三级缓存","slug":"三级缓存","link":"#三级缓存","children":[]},{"level":2,"title":"gc","slug":"gc","link":"#gc","children":[]},{"level":2,"title":"两阶段提交","slug":"两阶段提交","link":"#两阶段提交","children":[]},{"level":2,"title":"缓存更新策略","slug":"缓存更新策略","link":"#缓存更新策略","children":[]},{"level":2,"title":"云原生","slug":"云原生","link":"#云原生","children":[]},{"level":2,"title":"设计模式","slug":"设计模式","link":"#设计模式","children":[{"level":3,"title":"常用设计","slug":"常用设计","link":"#常用设计","children":[]},{"level":3,"title":"solid原则","slug":"solid原则","link":"#solid原则","children":[]}]}],"git":{"createdTime":1734964134000,"updatedTime":1734964134000,"contributors":[{"name":"Yang Yang","username":"Yang Yang","email":"yangyang@YangdeMacBook-Air.local","commits":1,"url":"https://github.com/Yang Yang"}]},"readingTime":{"minutes":17.59,"words":5277},"filePathRelative":"其他/查漏补缺.md","localizedDate":"2024年12月23日","autoDesc":true}')},6262:(a,s)=>{s.A=(a,s)=>{const i=a.__vccOpts||a;for(const[a,n]of s)i[a]=n;return i}}}]);