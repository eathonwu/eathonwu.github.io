"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7726],{3824:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>p});var i=a(641);const e={},l=(0,a(6262).A)(e,[["render",function(n,s){return(0,i.uX)(),(0,i.CE)("div",null,s[0]||(s[0]=[(0,i.Fv)('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目"><span>题目</span></a></h2><ol start="855"><li>考场就座<br> 尝试过<br> 中等<br> 相关标签<br> 相关企业<br> 在考场里，有 n 个座位排成一行，编号为 0 到 n - 1。</li></ol><p>当学生进入考场后，他必须坐在离最近的人最远的座位上。如果有多个这样的座位，他会坐在编号最小的座位上。(另外，如果考场里没有人，那么学生就坐在 0 号座位上。)</p><p>设计一个模拟所述考场的类。</p><p>实现 ExamRoom 类：</p><p>ExamRoom(int n) 用座位的数量 n 初始化考场对象。<br> int seat() 返回下一个学生将会入座的座位编号。<br> void leave(int p) 指定坐在座位 p 的学生将离开教室。保证座位 p 上会有一位学生。</p><p>示例 1：</p><p>输入：<br> [&quot;ExamRoom&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;seat&quot;, &quot;leave&quot;, &quot;seat&quot;]<br> [[10], [], [], [], [], [4], []]<br> 输出：<br> [null, 0, 9, 4, 2, null, 5]<br> 解释：<br> ExamRoom examRoom = new ExamRoom(10);<br> examRoom.seat(); // 返回 0，房间里没有人，学生坐在 0 号座位。<br> examRoom.seat(); // 返回 9，学生最后坐在 9 号座位。<br> examRoom.seat(); // 返回 4，学生最后坐在 4 号座位。<br> examRoom.seat(); // 返回 2，学生最后坐在 2 号座位。<br> examRoom.leave(4);<br> examRoom.seat(); // 返回 5，学生最后坐在 5 号座位。</p><p>提示：</p><p>1 &lt;= n &lt;= 109<br> 保证有学生正坐在座位 p 上。<br> seat 和 leave 最多被调用 104 次。</p><h2 id="答案" tabindex="-1"><a class="header-anchor" href="#答案"><span>答案</span></a></h2><div class="language-.go line-numbers-mode" data-highlighter="shiki" data-ext=".go" data-title=".go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>type ExamRoom struct {</span></span>\n<span class="line"><span>\titems []bool</span></span>\n<span class="line"><span>\tseat  int</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func Constructor(n int) ExamRoom {</span></span>\n<span class="line"><span>\titems := make([]bool, n)</span></span>\n<span class="line"><span>\t//    for i:=0;i&lt;n;i++{</span></span>\n<span class="line"><span>\t//     items[i]=item{preIndex:-1,nextIdx:-1}</span></span>\n<span class="line"><span>\t//    }</span></span>\n<span class="line"><span>\treturn ExamRoom{items: items}</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func (this *ExamRoom) Seat() int {</span></span>\n<span class="line"><span>\tif this.seat == 0 {</span></span>\n<span class="line"><span>\t\tthis.items[0] = true</span></span>\n<span class="line"><span>\t\tthis.seat = 1</span></span>\n<span class="line"><span>\t\treturn 0</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\t// 找寻未占用位置的最大距离</span></span>\n<span class="line"><span>\tpreMaxIdx := 0</span></span>\n<span class="line"><span>\tmaxLen := 0</span></span>\n<span class="line"><span>    arrLen := len(this.items)</span></span>\n<span class="line"><span>\tfor i := 0; i &lt; len(this.items); {</span></span>\n<span class="line"><span>\t\tif this.items[i] == true {</span></span>\n<span class="line"><span>\t\t\ti++</span></span>\n<span class="line"><span>\t\t\tcontinue</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t\trightj := i</span></span>\n<span class="line"><span>\t\tfor j := i + 1; j &lt; len(this.items); j++ {</span></span>\n<span class="line"><span>\t\t\tif this.items[j] == true {</span></span>\n<span class="line"><span>\t\t\t\tbreak</span></span>\n<span class="line"><span>\t\t\t}</span></span>\n<span class="line"><span>\t\t\trightj = j</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t\tl := rightj - i + 1 </span></span>\n<span class="line"><span>\t\tif l%2 == 0 &amp;&amp; (l-1) &gt; maxLen {</span></span>\n<span class="line"><span>\t\t\tmaxLen = rightj - i + 1</span></span>\n<span class="line"><span>\t\t\tpreMaxIdx = i</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>\t\tif l%2 == 1 &amp;&amp; l &gt; maxLen {</span></span>\n<span class="line"><span>\t\t\tmaxLen = rightj - i + 1</span></span>\n<span class="line"><span>\t\t\tpreMaxIdx = i</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        if rightj == arrLen - 1  &amp;&amp;  (rightj-i+1) * 2 + 1 &gt; l {</span></span>\n<span class="line"><span>            preMaxIdx = i</span></span>\n<span class="line"><span>            maxLen =  (rightj-i+1) * 2 + 1 </span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t\tif rightj == i {</span></span>\n<span class="line"><span>\t\t\ti++</span></span>\n<span class="line"><span>\t\t} else {</span></span>\n<span class="line"><span>\t\t\ti = rightj + 1</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\tret := preMaxIdx + maxLen/2 - 1</span></span>\n<span class="line"><span>\tif maxLen%2 == 1 {</span></span>\n<span class="line"><span>\t\tret = ret + 1</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>\tif preMaxIdx+maxLen &gt;= len(this.items) {</span></span>\n<span class="line"><span>\t\tret = len(this.items) - 1</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>    if preMaxIdx == 0 {</span></span>\n<span class="line"><span>\t\tret = 0</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>\tthis.items[ret] = true</span></span>\n<span class="line"><span>\tthis.seat++</span></span>\n<span class="line"><span>\treturn ret</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>func (this *ExamRoom) Leave(p int) {</span></span>\n<span class="line"><span>\tthis.items[p] = false</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>/**</span></span>\n<span class="line"><span> * Your ExamRoom object will be instantiated and called as such:</span></span>\n<span class="line"><span> * obj := Constructor(n);</span></span>\n<span class="line"><span> * param_1 := obj.Seat();</span></span>\n<span class="line"><span> * obj.Leave(p);</span></span>\n<span class="line"><span> */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',12)]))}]]),p=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/20241223.html","title":"20241223-TODO","lang":"zh-CN","frontmatter":{"title":"20241223-TODO","description":"题目 考场就座 尝试过 中等 相关标签 相关企业 在考场里，有 n 个座位排成一行，编号为 0 到 n - 1。 当学生进入考场后，他必须坐在离最近的人最远的座位上。如果有多个这样的座位，他会坐在编号最小的座位上。(另外，如果考场里没有人，那么学生就坐在 0 号座位上。) 设计一个模拟所述考场的类。 实现 ExamRoom 类： ExamRoom(in...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/%E7%AE%97%E6%B3%95/%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/20241223.html"}],["meta",{"property":"og:site_name","content":"ntom"}],["meta",{"property":"og:title","content":"20241223-TODO"}],["meta",{"property":"og:description","content":"题目 考场就座 尝试过 中等 相关标签 相关企业 在考场里，有 n 个座位排成一行，编号为 0 到 n - 1。 当学生进入考场后，他必须坐在离最近的人最远的座位上。如果有多个这样的座位，他会坐在编号最小的座位上。(另外，如果考场里没有人，那么学生就坐在 0 号座位上。) 设计一个模拟所述考场的类。 实现 ExamRoom 类： ExamRoom(in..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T14:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T14:28:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"20241223-TODO\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-23T14:28:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"notm\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"答案","slug":"答案","link":"#答案","children":[]}],"git":{"createdTime":1734964134000,"updatedTime":1734964134000,"contributors":[{"name":"Yang Yang","username":"Yang Yang","email":"yangyang@YangdeMacBook-Air.local","commits":1,"url":"https://github.com/Yang Yang"}]},"readingTime":{"minutes":1.83,"words":548},"filePathRelative":"算法/ 每日一题/20241223.md","localizedDate":"2024年12月23日","autoDesc":true}')},6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,i]of s)a[n]=i;return a}}}]);