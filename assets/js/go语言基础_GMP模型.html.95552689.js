"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7406],{480:(e,t,o)=>{o.r(t),o.d(t,{comp:()=>r,data:()=>n});var a=o(641);const p={},r=(0,o(6262).A)(p,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,[(0,a.Q3)("more"),t[0]||(t[0]=(0,a.Fv)('<p>G的大小: 2-4k</p><p>线程的大小 M?</p><figure><img src="https://cdn.learnku.com/uploads/images/202003/11/58489/a4vWtvRWGQ.jpeg!large" alt="18-go-func调度周期.jpeg" tabindex="0" loading="lazy"><figcaption>18-go-func调度周期.jpeg</figcaption></figure><p>1、我们通过 go func () 来创建一个 goroutine；</p><p>2、有两个存储 G 的队列，一个是局部调度器 P 的本地队列、一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在全局的队列中；</p><p>3、G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；</p><p>4、一个 M 调度 G 执行的过程是一个循环机制；</p><p>5、当 M 执行某一个 G 时候如果发生了 syscall 或则其余阻塞操作，M 会阻塞，如果当前有一些 G 在执行，runtime 会把这个线程 M 从 P 中摘除 (detach)，然后再创建一个新的操作系统的线程 (如果有空闲的线程可用就复用空闲线程) 来服务于这个 P；</p><p>6、当 M 系统调用结束时候，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。如果获取不到 P，那么这个线程 M 变成休眠状态， 加入到空闲线程中，然后这个 G 会被放入全局队列中</p><p>参考链接: <a href="https://learnku.com/articles/41728" target="_blank" rel="noopener noreferrer">https://learnku.com/articles/41728</a></p><p>进程和线程:<a href="http://staff.ustc.edu.cn/~huangwc/osppt/2.pdf" target="_blank" rel="noopener noreferrer">http://staff.ustc.edu.cn/~huangwc/osppt/2.pdf</a></p><p>视频理解:<a href="https://www.bilibili.com/video/BV1hv411x7we?p=16" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1hv411x7we?p=16</a></p>',12))])}]]),n=JSON.parse('{"path":"/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/GMP%E6%A8%A1%E5%9E%8B.html","title":"GMP模型","lang":"zh-CN","frontmatter":{"title":"GMP模型","date":"2024-12-09T14:39:39.000Z","lastmod":"2024-12-09T14:39:39.000Z","author":"notmtop","categories":["go语言基础"],"tags":["GMP","go语言基础"],"description":"G的大小: 2-4k 线程的大小 M? 18-go-func调度周期.jpeg18-go-func调度周期.jpeg 1、我们通过 go func () 来创建一个 goroutine； 2、有两个存储 G 的队列，一个是局部调度器 P 的本地队列、一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/GMP%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"ntom"}],["meta",{"property":"og:title","content":"GMP模型"}],["meta",{"property":"og:description","content":"G的大小: 2-4k 线程的大小 M? 18-go-func调度周期.jpeg18-go-func调度周期.jpeg 1、我们通过 go func () 来创建一个 goroutine； 2、有两个存储 G 的队列，一个是局部调度器 P 的本地队列、一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.learnku.com/uploads/images/202003/11/58489/a4vWtvRWGQ.jpeg!large"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T14:28:54.000Z"}],["meta",{"property":"article:author","content":"notmtop"}],["meta",{"property":"article:tag","content":"GMP"}],["meta",{"property":"article:tag","content":"go语言基础"}],["meta",{"property":"article:published_time","content":"2024-12-09T14:39:39.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T14:28:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GMP模型\\",\\"image\\":[\\"https://cdn.learnku.com/uploads/images/202003/11/58489/a4vWtvRWGQ.jpeg!large\\"],\\"datePublished\\":\\"2024-12-09T14:39:39.000Z\\",\\"dateModified\\":\\"2024-12-23T14:28:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"notmtop\\"}]}"]]},"headers":[],"git":{"createdTime":1734964134000,"updatedTime":1734964134000,"contributors":[{"name":"Yang Yang","username":"Yang Yang","email":"yangyang@YangdeMacBook-Air.local","commits":1,"url":"https://github.com/Yang Yang"}]},"readingTime":{"minutes":1.52,"words":455},"filePathRelative":"go语言基础/GMP模型.md","localizedDate":"2024年12月9日","autoDesc":true}')},6262:(e,t)=>{t.A=(e,t)=>{const o=e.__vccOpts||e;for(const[e,a]of t)o[e]=a;return o}}}]);