"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4458],{5223:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>p});var e=a(641);const i={},l=(0,a(6262).A)(i,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目"><span>题目</span></a></h2><p><a href="https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-i/?envType=daily-question&amp;envId=2024-12-17" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-i/?envType=daily-question&amp;envId=2024-12-17</a></p><p>给你一个字符串数组 <code>words</code> 和一个字符串 <code>target</code>。</p><p>如果字符串 <code>x</code> 是 <code>words</code> 中 <strong>任意</strong> 字符串的</p><p>前缀</p><p>，则认为 <code>x</code> 是一个 <strong>有效</strong> 字符串。</p><p>现计划通过 <strong>连接</strong> 有效字符串形成 <code>target</code> ，请你计算并返回需要连接的 <strong>最少</strong> 字符串数量。如果无法通过这种方式形成 <code>target</code>，则返回 <code>-1</code>。</p><h2 id="答案" tabindex="-1"><a class="header-anchor" href="#答案"><span>答案</span></a></h2><div class="language-golang line-numbers-mode" data-highlighter="shiki" data-ext="golang" data-title="golang" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>func minValidStrings(words []string, target string) int {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    prefixFunction := func(word, target string) []int {</span></span>\n<span class="line"><span>        s := word + &quot;#&quot; + target</span></span>\n<span class="line"><span>        n := len(s)</span></span>\n<span class="line"><span>        pi := make([]int, n)</span></span>\n<span class="line"><span>        for i := 1; i &lt; n; i++ {</span></span>\n<span class="line"><span>            j := pi[i - 1]</span></span>\n<span class="line"><span>            for j &gt; 0 &amp;&amp; s[i] != s[j] {</span></span>\n<span class="line"><span>                j = pi[j - 1]</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            if s[i] == s[j] {</span></span>\n<span class="line"><span>                j++</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            pi[i] = j</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        return pi</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    n := len(target)</span></span>\n<span class="line"><span>    back := make([]int, n)</span></span>\n<span class="line"><span>    for _, word := range words {</span></span>\n<span class="line"><span>        pi := prefixFunction(word, target)</span></span>\n<span class="line"><span>        m := len(word)</span></span>\n<span class="line"><span>        for i := 0; i &lt; n; i++ {</span></span>\n<span class="line"><span>            back[i] = int(math.Max(float64(back[i]), float64(pi[m + 1 + i])))</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // dp[i] = dp[i-back[i]] + 1</span></span>\n<span class="line"><span>    // kmp 求对应backi</span></span>\n<span class="line"><span>    dp := make([]int,len(target)+1)</span></span>\n<span class="line"><span>    for i := 1; i &lt;= n; i++ {</span></span>\n<span class="line"><span>        dp[i] = int(1e9)</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    for i:=0;i&lt;len(target);i++{</span></span>\n<span class="line"><span>        dp[i + 1] = dp[i + 1 - back[i]] + 1</span></span>\n<span class="line"><span>        if dp[i+1] &gt; n{</span></span>\n<span class="line"><span>            return -1</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    return dp[n]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="待跟进算法思想" tabindex="-1"><a class="header-anchor" href="#待跟进算法思想"><span>待跟进算法思想</span></a></h2><h3 id="kmp" tabindex="-1"><a class="header-anchor" href="#kmp"><span>kmp</span></a></h3><h3 id="字典树" tabindex="-1"><a class="header-anchor" href="#字典树"><span>字典树</span></a></h3>',12)]))}]]),p=JSON.parse('{"path":"/%E7%AE%97%E6%B3%95/%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/20241217-TODO.html","title":"20241217 - TODO","lang":"zh-CN","frontmatter":{"title":"20241217 - TODO","description":"题目 https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-i/?envType=daily-question&envId=2024-12-17 给你一个字符串数组 words 和一个字符串 target。 如果字符串 x 是 words 中 任意 字符串...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/%E7%AE%97%E6%B3%95/%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/20241217-TODO.html"}],["meta",{"property":"og:site_name","content":"ntom"}],["meta",{"property":"og:title","content":"20241217 - TODO"}],["meta",{"property":"og:description","content":"题目 https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-i/?envType=daily-question&envId=2024-12-17 给你一个字符串数组 words 和一个字符串 target。 如果字符串 x 是 words 中 任意 字符串..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T14:28:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T14:28:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"20241217 - TODO\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-23T14:28:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"notm\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"答案","slug":"答案","link":"#答案","children":[]},{"level":2,"title":"待跟进算法思想","slug":"待跟进算法思想","link":"#待跟进算法思想","children":[{"level":3,"title":"kmp","slug":"kmp","link":"#kmp","children":[]},{"level":3,"title":"字典树","slug":"字典树","link":"#字典树","children":[]}]}],"git":{"createdTime":1734964134000,"updatedTime":1734964134000,"contributors":[{"name":"Yang Yang","username":"Yang Yang","email":"yangyang@YangdeMacBook-Air.local","commits":1,"url":"https://github.com/Yang Yang"}]},"readingTime":{"minutes":0.94,"words":281},"filePathRelative":"算法/ 每日一题/20241217-TODO.md","localizedDate":"2024年12月23日","autoDesc":true}')},6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);